#!/usr/bin/env python3

import subprocess
import sys
import termios
import tty

COLORS = [
    '\033[91m',  # bright red
    '\033[92m',  # bright green
    '\033[93m',  # bright yellow
    '\033[94m',  # bright blue
    '\033[95m',  # bright magenta
    '\033[96m',  # bright cyan
    '\033[97m',  # bright white
    '\033[90m',  # bright black (gray)
]
RESET = '\033[0m'

def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch

def get_connected_devices():
    result = subprocess.run(["adb", "devices"], capture_output=True, text=True)
    devices = []
    for line in result.stdout.split("\n"):
        if "\tdevice" in line:
            devices.append(line.split("\t")[0])
    return devices

def get_prefix_color_map(devices):
    prefixes = {device[:3] for device in devices}
    return {prefix: COLORS[i % len(COLORS)] for i, prefix in enumerate(sorted(prefixes))}

def get_key_for_index(index):
    # 1-9, then 0, then a-z
    if index < 9:
        return str(index + 1)
    elif index == 9:
        return '0'
    return chr(ord('a') + index - 10)

def draw_menu(devices, color_map):
    # Clear screen - move to top-left and clear to end of screen
    print("\033[H\033[J", end='', file=sys.stderr)
    
    for index, device in enumerate(devices):
        key = get_key_for_index(index)
        color = color_map[device[:3]]
        print(f"[{key}] {color}{device}{RESET}", file=sys.stderr)
    
    print("\n> ", end='', file=sys.stderr)
    sys.stderr.flush()

def show_menu(devices):
    color_map = get_prefix_color_map(devices)
    draw_menu(devices, color_map)
    
    while True:
        choice = getch()
        
        if ord(choice) == 3:  # Ctrl-C
            print("\n", file=sys.stderr)
            return None
        elif ord(choice) == 13:  # Enter
            devices = get_connected_devices()
            if not devices:
                print("\nNo devices found", file=sys.stderr)
                sys.exit(1)
            color_map = get_prefix_color_map(devices)
            draw_menu(devices, color_map)
            continue
        
        if choice.isdigit():
            if choice == '0':
                index = 9
            else:
                index = int(choice) - 1
        elif choice.isalpha():
            index = ord(choice.lower()) - ord('a') + 10
        else:
            continue

        if 0 <= index < len(devices):
            device = devices[index]
            color = color_map[device[:3]]
            print(f"\r> {color}{device}{RESET}\n", file=sys.stderr)
            return device

def main():
    try:
        devices = get_connected_devices()
        if not devices:
            sys.exit(1)
        
        selected_device = show_menu(devices)
        if selected_device is None:
            sys.exit(130)  # 128 + SIGINT(2)
        print(selected_device)
        sys.exit(0)
    except KeyboardInterrupt:
        print("\n", file=sys.stderr)
        sys.exit(130)  # 128 + SIGINT(2)

if __name__ == "__main__":
    main()